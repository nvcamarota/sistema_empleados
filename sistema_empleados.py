"""
SISTEMA DE EMPLEADOS
Crea una superclase Empleado con:
‚Ä¢ Un atributo nombre.
‚Ä¢ Un m√©todo mostrar_info() que imprime el nombre del empleado.

Crear las siguientes subclases:
‚Ä¢ Profesor: Agrega un atributo materia y modifica mostrar_info() para incluir la materia que ense√±a.
‚Ä¢ Desarrollador: Agrega un atributo leng√ºaje y muestra qu√© leng√ºaje programa.
‚Ä¢ Doctor: Agrega un atributo especialidad y muestra en qu√© se especializa.

Objetivo: Implementa la herencia correctamente.
‚Ä¢ Usa super().__init__ para reutilizar c√≥digo.
‚Ä¢ Crea una lista con varios empleados y muestra su informaci√≥n.
"""

# Superclase Empleado
class Empleado:
    def __init__(self, nombre):
        self.nombre = nombre.title()
    
    def mostrar_info(self):
        return f'Nombre del empleado: {self.nombre}.'
    
# Subclase Profesor - Contiene el atributo nombre de la superclase Empleado y el atributo materia de esta subclase
class Profesor(Empleado):
    def __init__(self, nombre, materia):
        super().__init__(nombre)
        self.materia = materia.capitalize()

# Reutiliza la funci√≥n mostrar_info() de la superclase Empleado m√°s un mensaje personalizado para esta subclase
    def mostrar_info(self):
        return f'{super().mostrar_info()}\n{self.nombre} ense√±a {self.materia} a sus estudiantes.\n'

# Subclase Desarrollador - Contiene el atributo nombre de la superclase Empleado y el atributo leng√ºaje de esta subclase
class Desarrollador(Empleado):
    def __init__(self, nombre, leng√ºaje):
        super().__init__(nombre)
        self.leng√ºaje = leng√ºaje.capitalize()
  
# Reutiliza la funci√≥n mostrar_info() de la superclase Empleado m√°s un mensaje personalizado para esta subclase 
    def mostrar_info(self):
        return f'{super().mostrar_info()}\n{self.nombre} sabe programar en {self.leng√ºaje}.\n'
    
# Subclase Doctor - Contiene el atributo nombre de la superclase Empleado y el atributo especialidad de esta subclase
class Doctor(Empleado):
    def __init__(self, nombre, especialidad):
        super().__init__(nombre)
        self.especialidad = especialidad.capitalize()
        
# Reutiliza la funci√≥n mostrar_info() de la superclase Empleado m√°s un mensaje personalizado para esta subclase
    def mostrar_info(self):
        return f'{super().mostrar_info()}\n{self.nombre} se especializa en {self.especialidad}.\n'
    
# Funci√≥n que contiene un t√≠tulo principal y una lista de empleados utilizando la l√≥gica de las subclases
def listado_personal():
    print('Listado de empleados:\n')
    return [
        Profesor('Rodrigo P√©rez', 'Matem√°tica'),
        Desarrollador('Eric Mena', 'JavaScript'),
        Doctor('Mayra Miranda', 'Radiolog√≠a')
    ]
    
# Bucle que recorre el listado de empleados de la funci√≥n listado_personal() e imprime su respectiva informaci√≥n
for persona in listado_personal():
    print(persona.mostrar_info())

# Mensaje de cierre
print('Cerrando "Sistema de empleados". ¬°Hasta la pr√≥xima! üëã')